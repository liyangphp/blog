{"version":3,"sources":["../src/utils.js"],"names":["calculateElementOffset","getLineHeightPx","createCustomEvent","window","CustomEvent","type","options","document","defaultView","cancelable","detail","undefined","event","createEvent","initCustomEvent","el","rect","getBoundingClientRect","ownerDocument","documentElement","offset","top","pageYOffset","left","pageXOffset","clientTop","clientLeft","CHAR_CODE_ZERO","charCodeAt","CHAR_CODE_NINE","isDigit","charCode","node","computedStyle","getComputedStyle","lineHeight","length","parseFloat","fontSize","body","tempNode","createElement","nodeName","innerHTML","style","fontFamily","appendChild","height","offsetHeight","removeChild"],"mappings":";;;;;QAkCgBA,sB,GAAAA,sB;QAuBAC,e,GAAAA,e;;;AAvDhB;;;;;AAKO,IAAMC,gDAAqB,YAAM;AACtC,MAAI,OAAOC,OAAOC,WAAd,KAA8B,UAAlC,EAA8C;AAC5C,WAAO,UAAUC,IAAV,EAAwBC,OAAxB,EAA2F;AAChG,aAAO,IAAIC,SAASC,WAAT,CAAqBJ,WAAzB,CAAqCC,IAArC,EAA2C;AAChDI,oBAAYH,WAAWA,QAAQG,UAAnB,IAAiC,KADG;AAEhDC,gBAAQJ,WAAWA,QAAQI,MAAnB,IAA6BC;AAFW,OAA3C,CAAP;AAID,KALD;AAMD,GAPD,MAOO;AACL;AACA;AACA,WAAO,UAAUN,IAAV,EAAwBC,OAAxB,EAA2F;AAChG,UAAMM,QAAQL,SAASM,WAAT,CAAqB,aAArB,CAAd;AACAD,YAAME,eAAN,CAAsBT,IAAtB;AACE,mBAAc,KADhB,EAEEC,WAAWA,QAAQG,UAAnB,IAAiC,KAFnC,EAGEH,WAAWA,QAAQI,MAAnB,IAA6BC,SAH/B;AAIA,aAAOC,KAAP;AACD,KAPD;AAQD;AACF,CApBgC,EAA1B;;AAsBP;;;;;AAKO,SAASZ,sBAAT,CAAgCe,EAAhC,EAAiF;AACtF,MAAMC,OAAOD,GAAGE,qBAAH,EAAb;AADsF,0BAE/CF,GAAGG,aAF4C;AAAA,MAE/EV,WAF+E,qBAE/EA,WAF+E;AAAA,MAElEW,eAFkE,qBAElEA,eAFkE;;AAGtF,MAAMC,SAAS,EAAEC,KAAKL,KAAKK,GAAL,GAAWb,YAAYc,WAA9B,EAA2CC,MAAMP,KAAKO,IAAL,GAAYf,YAAYgB,WAAzE,EAAf;AACA,MAAIL,eAAJ,EAAqB;AACnBC,WAAOC,GAAP,IAAcF,gBAAgBM,SAA9B;AACAL,WAAOG,IAAP,IAAeJ,gBAAgBO,UAA/B;AACD;AACD,SAAON,MAAP;AACD;;AAED,IAAMO,iBAAiB,IAAIC,UAAJ,CAAe,CAAf,CAAvB;AACA,IAAMC,iBAAiB,IAAID,UAAJ,CAAe,CAAf,CAAvB;;AAEA,SAASE,OAAT,CAAiBC,QAAjB,EAA4C;AAC1C,SAAOA,YAAYJ,cAAZ,IAA8BI,YAAYF,cAAjD;AACD;;AAED;;;;;AAKO,SAAS5B,eAAT,CAAyB+B,IAAzB,EAAoD;AACzD,MAAMC,gBAAgB9B,OAAO+B,gBAAP,CAAwBF,IAAxB,CAAtB;;AAEA;AACA;AACA;AACA;AACA,MAAIF,QAAQG,cAAcE,UAAd,CAAyBP,UAAzB,CAAoC,CAApC,CAAR,CAAJ,EAAqD;AACnD;AACA;AACA,QAAIE,QAAQG,cAAcE,UAAd,CAAyBP,UAAzB,CAAoCK,cAAcE,UAAd,CAAyBC,MAAzB,GAAkC,CAAtE,CAAR,CAAJ,EAAuF;AACrF,aAAOC,WAAWJ,cAAcE,UAAzB,IAAuCE,WAAWJ,cAAcK,QAAzB,CAA9C;AACD,KAFD,MAEO;AACL,aAAOD,WAAWJ,cAAcE,UAAzB,CAAP;AACD;AACF;;AAED;AACA;AACA,MAAMI,OAAOhC,SAASgC,IAAtB;AACA,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,CAAP;AACD;AACD,MAAMC,WAAWjC,SAASkC,aAAT,CAAuBT,KAAKU,QAA5B,CAAjB;AACAF,WAASG,SAAT,GAAqB,QAArB;AACAH,WAASI,KAAT,CAAeN,QAAf,GAA0BL,cAAcK,QAAxC;AACAE,WAASI,KAAT,CAAeC,UAAf,GAA4BZ,cAAcY,UAA1C;AACAN,OAAKO,WAAL,CAAiBN,QAAjB;AACA;AACA,MAAMO,SAASP,SAASQ,YAAxB;AACAT,OAAKU,WAAL,CAAiBT,QAAjB;AACA,SAAOO,MAAP;AACD","file":"utils.js","sourcesContent":["// @flow\n\n/**\n * Create a custom event\n *\n * @private\n */\nexport const createCustomEvent = (() => {\n  if (typeof window.CustomEvent === 'function') {\n    return function (type: string, options: ?{ detail?: Object; cancelable?: boolean; }): CustomEvent {\n      return new document.defaultView.CustomEvent(type, {\n        cancelable: options && options.cancelable || false,\n        detail: options && options.detail || undefined,\n      });\n    };\n  } else {\n    // Custom event polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#polyfill\n    return function (type: string, options: ?{ detail?: Object; cancelable?: boolean; }): CustomEvent {\n      const event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type,\n        /* bubbles */ false,\n        options && options.cancelable || false,\n        options && options.detail || undefined);\n      return event;\n    };\n  }\n})();\n\n/**\n * Get the current coordinates of the `el` relative to the document.\n *\n * @private\n */\nexport function calculateElementOffset(el: HTMLElement): { top: number; left: number; } {\n  const rect = el.getBoundingClientRect();\n  const {defaultView, documentElement} = el.ownerDocument;\n  const offset = { top: rect.top + defaultView.pageYOffset, left: rect.left + defaultView.pageXOffset };\n  if (documentElement) {\n    offset.top -= documentElement.clientTop;\n    offset.left -= documentElement.clientLeft;\n  }\n  return offset;\n}\n\nconst CHAR_CODE_ZERO = '0'.charCodeAt(0);\nconst CHAR_CODE_NINE = '9'.charCodeAt(0);\n\nfunction isDigit(charCode: number): boolean {\n  return charCode >= CHAR_CODE_ZERO && charCode <= CHAR_CODE_NINE;\n}\n\n/**\n * Returns the line-height of the given node in pixels.\n *\n * @private\n */\nexport function getLineHeightPx(node: HTMLElement): number {\n  const computedStyle = window.getComputedStyle(node);\n\n  // If the char code starts with a digit, it is either a value in pixels,\n  // or unitless, as per:\n  // https://drafts.csswg.org/css2/visudet.html#propdef-line-height\n  // https://drafts.csswg.org/css2/cascade.html#computed-value\n  if (isDigit(computedStyle.lineHeight.charCodeAt(0))) {\n    // In real browsers the value is *always* in pixels, even for unit-less\n    // line-heights. However, we still check as per the spec.\n    if (isDigit(computedStyle.lineHeight.charCodeAt(computedStyle.lineHeight.length - 1))) {\n      return parseFloat(computedStyle.lineHeight) * parseFloat(computedStyle.fontSize);\n    } else {\n      return parseFloat(computedStyle.lineHeight);\n    }\n  }\n\n  // Otherwise, the value is \"normal\".\n  // If the line-height is \"normal\", calculate by font-size\n  const body = document.body;\n  if (!body) {\n    return 0;\n  }\n  const tempNode = document.createElement(node.nodeName);\n  tempNode.innerHTML = '&nbsp;';\n  tempNode.style.fontSize = computedStyle.fontSize;\n  tempNode.style.fontFamily = computedStyle.fontFamily;\n  body.appendChild(tempNode);\n  // Assume the height of the element is the line-height\n  const height = tempNode.offsetHeight;\n  body.removeChild(tempNode);\n  return height;\n}\n"]}