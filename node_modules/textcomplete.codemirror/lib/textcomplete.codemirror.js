"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _editor = require("textcomplete/lib/editor");

var _editor2 = _interopRequireDefault(_editor);

var _utils = require("textcomplete/lib/utils");

var _search_result = require("textcomplete/lib/search_result");

var _search_result2 = _interopRequireDefault(_search_result);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_Editor) {
  _inherits(_class, _Editor);

  function _class(cm) {
    _classCallCheck(this, _class);

    var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

    _this.cm = cm;_this.onKeydown = _this.onKeydown.bind(_this);_this.onKeyup = _this.onKeyup.bind(_this);
    _this.startListening();
    return _this;
  }

  _createClass(_class, [{
    key: "destroy",
    value: function destroy() {
      _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "destroy", this).call(this);
      this.stopListening();
      this.cm = null;
      return this;
    }
  }, {
    key: "applySearchResult",
    value: function applySearchResult(searchResult) {
      var replace = searchResult.replace(this.getBeforeCursor(), this.getAfterCursor());
      if (Array.isArray(replace)) {
        this.cm.doc.setValue(replace[0] + replace[1]);
        var lines = replace[0].split("\n");
        this.cm.doc.setCursor(lines.length - 1, lines[lines.length - 1].length);
      }
      this.cm.focus();
    }
  }, {
    key: "getCursorOffset",
    value: function getCursorOffset() {
      var el = this.cm.display.cursorDiv.firstChild;
      var offset = (0, _utils.calculateElementOffset)(el);
      var lineHeight = parseInt(el.style.height, 10);
      return {
        left: offset.left,
        lineHeight: lineHeight,
        top: offset.top + lineHeight
      };
    }
  }, {
    key: "getBeforeCursor",
    value: function getBeforeCursor() {
      var _getCursor = this.getCursor(),
          line = _getCursor.line,
          ch = _getCursor.ch;

      var lines = this.getLines();
      var linesBeforeCursor = lines.slice(0, line);
      var currentLineBeforeCursor = lines[line].slice(0, ch);
      return linesBeforeCursor.concat([currentLineBeforeCursor]).join(this.lineSeparator());
    }
  }, {
    key: "getAfterCursor",
    value: function getAfterCursor() {
      var _getCursor2 = this.getCursor(),
          line = _getCursor2.line,
          ch = _getCursor2.ch;

      var lines = this.getLines();
      var linesAfterCursor = lines.slice(line + 1);
      var currentLineAfterCursor = lines[line].slice(ch);
      return [currentLineAfterCursor].concat(linesAfterCursor).join(this.lineSeparator());
    }

    /** @private */

  }, {
    key: "getLines",
    value: function getLines() {
      return this.cm.doc.getValue().split(this.lineSeparator());
    }

    /** @private */

  }, {
    key: "getCursor",
    value: function getCursor() {
      return this.cm.doc.getCursor();
    }

    /** @private */

  }, {
    key: "lineSeparator",
    value: function lineSeparator() {
      return this.cm.doc.lineSeparator();
    }

    /** @private */

  }, {
    key: "onKeydown",
    value: function onKeydown(cm, e) {
      var code = this.getCode(e);
      var event = void 0;
      if (code === "UP" || code === "DOWN") {
        event = this.emitMoveEvent(code);
      } else if (code === "ENTER") {
        event = this.emitEnterEvent();
      } else if (code === "ESC") {
        event = this.emitEscEvent();
      }
      if (event && event.defaultPrevented) {
        e.preventDefault();
      }
    }

    /** @private */

  }, {
    key: "onKeyup",
    value: function onKeyup(cm, e) {
      var code = this.getCode(e);
      if (code !== "DOWN" && code !== "UP" && code !== "META") {
        this.emitChangeEvent();
      }
    }

    /** @private */

  }, {
    key: "startListening",
    value: function startListening() {
      this.cm.on("keydown", this.onKeydown);
      this.cm.on("keyup", this.onKeyup);
    }

    /** @private */

  }, {
    key: "stopListening",
    value: function stopListening() {
      this.cm.off("keydown", this.onKeydown);
      this.cm.off("keyup", this.onKeyup);
    }
  }]);

  return _class;
}(_editor2.default);

exports.default = _class;
//# sourceMappingURL=textcomplete.codemirror.js.map