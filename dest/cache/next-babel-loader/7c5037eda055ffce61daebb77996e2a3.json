{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nconst currentInitialState = {\n  current: 1\n};\nconst labelsInitialState = {\n  labels: ''\n};\nconst UPDATE_CURRENT = 'UPDATE_CURRENT';\n\nfunction update(current) {\n  return {\n    type: UPDATE_CURRENT,\n    current\n  };\n}\n\nfunction addAsync(current) {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(update(current));\n    }, 1000);\n  };\n}\n\nfunction currentReducer(state = currentInitialState, action) {\n  switch (action.type) {\n    case UPDATE_CURRENT:\n      return {\n        current: action.current || ''\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst UPDATE_LABELS = 'UPDATE_LABELS';\n\nfunction labelsReducer(state = labelsInitialState, action) {\n  switch (action.type) {\n    case UPDATE_LABELS:\n      return {\n        labels: action.labels\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  current: currentReducer,\n  labels: labelsReducer\n}); // const store = createStore(\n//     allReducers,\n//     {\n//         token: initialState,\n//         user: userInitialState\n//     },\n//     applyMiddleware(ReduxThunk),\n// )\n// console.log(store.getState())\n// store.subscribe(()=>{\n//     console.log(store.getState())\n// })\n// store.dispatch(add(3))\n// store.dispatch(addAsync(5))\n// store.dispatch({ type:ADD })\n// console.log(store.getState())\n\nexport default function initializeStore() {\n  const store = createStore(allReducers, {\n    current: currentInitialState,\n    labels: labelsInitialState\n  }, applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/mac/Desktop/liy-blog/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","currentInitialState","current","labelsInitialState","labels","UPDATE_CURRENT","update","type","addAsync","dispatch","setTimeout","currentReducer","state","action","UPDATE_LABELS","labelsReducer","allReducers","initializeStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,OAAO,EAAE;AADe,CAA5B;AAIA,MAAMC,kBAAkB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AADe,CAA3B;AAIA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,SAASC,MAAT,CAAgBJ,OAAhB,EAAyB;AACrB,SAAO;AACHK,IAAAA,IAAI,EAAEF,cADH;AAEHH,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASM,QAAT,CAAkBN,OAAlB,EAA2B;AACvB,SAAQO,QAAD,IAAc;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAACH,MAAM,CAACJ,OAAD,CAAP,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJD;AAKH;;AAID,SAASS,cAAT,CAAwBC,KAAK,GAAGX,mBAAhC,EAAqDY,MAArD,EAA6D;AACzD,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKF,cAAL;AACI,aAAO;AAAEH,QAAAA,OAAO,EAAEW,MAAM,CAACX,OAAP,IAAkB;AAA7B,OAAP;;AACJ;AACI,aAAOU,KAAP;AAJR;AAMH;;AAED,MAAME,aAAa,GAAG,eAAtB;;AACA,SAASC,aAAT,CAAuBH,KAAK,GAAGT,kBAA/B,EAAmDU,MAAnD,EAA2D;AACvD,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKO,aAAL;AACI,aAAO;AACHV,QAAAA,MAAM,EAAES,MAAM,CAACT;AADZ,OAAP;;AAGJ;AACI,aAAOQ,KAAP;AANR;AAQH;;AAMD,MAAMI,WAAW,GAAGlB,eAAe,CAAC;AAChCI,EAAAA,OAAO,EAAES,cADuB;AAEhCP,EAAAA,MAAM,EAAEW;AAFwB,CAAD,CAAnC,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAIA,eAAe,SAASE,eAAT,GAA2B;AACtC,QAAMC,KAAK,GAAGrB,WAAW,CAACmB,WAAD,EACrB;AACId,IAAAA,OAAO,EAAED,mBADb;AAEIG,IAAAA,MAAM,EAAED;AAFZ,GADqB,EAKrBJ,eAAe,CAACC,UAAD,CALM,CAAzB;AAMA,SAAOkB,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nconst currentInitialState = {\n    current: 1\n}\n\nconst labelsInitialState = {\n    labels: ''\n}\n\nconst UPDATE_CURRENT = 'UPDATE_CURRENT'\n\nfunction update(current) {\n    return {\n        type: UPDATE_CURRENT,\n        current,\n    }\n}\n\nfunction addAsync(current) {\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(update(current))\n        }, 1000)\n    }\n}\n\n\n\nfunction currentReducer(state = currentInitialState, action) {\n    switch (action.type) {\n        case UPDATE_CURRENT:\n            return { current: action.current || '' }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_LABELS = 'UPDATE_LABELS'\nfunction labelsReducer(state = labelsInitialState, action) {\n    switch (action.type) {\n        case UPDATE_LABELS:\n            return {\n                labels: action.labels\n            }\n        default:\n            return state\n    }\n}\n\n\n\n\n\nconst allReducers = combineReducers({\n    current: currentReducer,\n    labels: labelsReducer\n})\n\n// const store = createStore(\n//     allReducers,\n//     {\n//         token: initialState,\n//         user: userInitialState\n//     },\n//     applyMiddleware(ReduxThunk),\n// )\n\n// console.log(store.getState())\n\n// store.subscribe(()=>{\n//     console.log(store.getState())\n// })\n\n// store.dispatch(add(3))\n\n// store.dispatch(addAsync(5))\n\n// store.dispatch({ type:ADD })\n\n// console.log(store.getState())\n\n\n\nexport default function initializeStore() {\n    const store = createStore(allReducers,\n        {\n            current: currentInitialState,\n            labels: labelsInitialState\n        },\n        applyMiddleware(ReduxThunk))\n    return store\n}"]},"metadata":{},"sourceType":"module"}