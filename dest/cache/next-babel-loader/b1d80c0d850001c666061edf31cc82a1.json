{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport initializeStore from '../store/store';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端每次执行都重新创建一个store\n    return initializeStore(initialState);\n  } // 在客户端执行这个方法的时候 优先返回window上已有的store\n  // 而不能每次执行都重新创建一个store 否则状态就无限重置了\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (Comp => {\n  class withReduxApp extends React.Component {\n    constructor(props) {\n      super(props); // getInitialProps创建了store 这里为什么又重新创建一次？\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n      // redux里有很多方法 不适合序列化存储\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\n      // 再在这里通过initialReduxState去创建一个完整的store\n\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      const _this$props = this.props,\n            {\n        Component,\n        pageProps\n      } = _this$props,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n      return __jsx(Comp, _extends({}, rest, {\n        Component: Component,\n        pageProps: pageProps,\n        reduxStore: this.reduxStore\n      }));\n    }\n\n  } // 这个其实是_app.js的getInitialProps\n  // 在服务端渲染和客户端路由跳转时会被执行\n  // 所以非常适合做redux-store的初始化\n\n\n  withReduxApp.getInitialProps = async ctx => {\n    const reduxStore = getOrCreateStore();\n    ctx.reduxStore = reduxStore;\n    let appProps = {};\n\n    if (typeof Comp.getInitialProps === 'function') {\n      appProps = await Comp.getInitialProps(ctx);\n    }\n\n    return _objectSpread({}, appProps, {\n      initialReduxState: reduxStore.getState()\n    });\n  };\n\n  return withReduxApp;\n});","map":{"version":3,"sources":["/Users/mac/Desktop/liy-blog/lib/with-redux-app.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","Comp","withReduxApp","Component","constructor","props","reduxStore","initialReduxState","render","pageProps","rest","getInitialProps","ctx","appProps","getState"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACpC,MAAIH,QAAJ,EAAc;AACV;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACH,GAJmC,CAKpC;AACA;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AAC/BG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACH;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACH;;AAED,gBAAeI,IAAI,IAAI;AACnB,QAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AACvCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN,EADe,CAEf;AACA;AACA;AACA;AACA;;AACA,WAAKC,UAAL,GAAkBR,gBAAgB,CAACO,KAAK,CAACE,iBAAP,CAAlC;AACH;;AAEDC,IAAAA,MAAM,GAAG;AACL,0BAA0C,KAAKH,KAA/C;AAAA,YAAM;AAAEF,QAAAA,SAAF;AAAaM,QAAAA;AAAb,OAAN;AAAA,YAAiCC,IAAjC;;AACA,aACI,MAAC,IAAD,eACQA,IADR;AAEI,QAAA,SAAS,EAAEP,SAFf;AAGI,QAAA,SAAS,EAAEM,SAHf;AAII,QAAA,UAAU,EAAE,KAAKH;AAJrB,SADJ;AAQH;;AArBsC,GADxB,CAyBnB;AACA;AACA;;;AACAJ,EAAAA,YAAY,CAACS,eAAb,GAA+B,MAAMC,GAAN,IAAa;AACxC,UAAMN,UAAU,GAAGR,gBAAgB,EAAnC;AACAc,IAAAA,GAAG,CAACN,UAAJ,GAAiBA,UAAjB;AAEA,QAAIO,QAAQ,GAAG,EAAf;;AACA,QAAI,OAAOZ,IAAI,CAACU,eAAZ,KAAgC,UAApC,EAAgD;AAC5CE,MAAAA,QAAQ,GAAG,MAAMZ,IAAI,CAACU,eAAL,CAAqBC,GAArB,CAAjB;AACH;;AAED,6BACOC,QADP;AAEIN,MAAAA,iBAAiB,EAAED,UAAU,CAACQ,QAAX;AAFvB;AAIH,GAbD;;AAeA,SAAOZ,YAAP;AACH,CA5CD","sourcesContent":["import React from 'react'\nimport initializeStore from '../store/store'\n\nconst isServer = typeof window === 'undefined'\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'\n\nfunction getOrCreateStore(initialState) {\n    if (isServer) {\n        // 服务端每次执行都重新创建一个store\n        return initializeStore(initialState)\n    }\n    // 在客户端执行这个方法的时候 优先返回window上已有的store\n    // 而不能每次执行都重新创建一个store 否则状态就无限重置了\n    if (!window[__NEXT_REDUX_STORE__]) {\n        window[__NEXT_REDUX_STORE__] = initializeStore(initialState)\n    }\n    return window[__NEXT_REDUX_STORE__]\n}\n\nexport default Comp => {\n    class withReduxApp extends React.Component {\n        constructor(props) {\n            super(props)\n            // getInitialProps创建了store 这里为什么又重新创建一次？\n            // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n            // redux里有很多方法 不适合序列化存储\n            // 所以选择在getInitialProps返回initialReduxState初始的状态\n            // 再在这里通过initialReduxState去创建一个完整的store\n            this.reduxStore = getOrCreateStore(props.initialReduxState)\n        }\n\n        render() {\n            const { Component, pageProps, ...rest } = this.props\n            return (\n                <Comp\n                    {...rest}\n                    Component={Component}\n                    pageProps={pageProps}\n                    reduxStore={this.reduxStore}\n                />\n            )\n        }\n    }\n\n    // 这个其实是_app.js的getInitialProps\n    // 在服务端渲染和客户端路由跳转时会被执行\n    // 所以非常适合做redux-store的初始化\n    withReduxApp.getInitialProps = async ctx => {\n        const reduxStore = getOrCreateStore()\n        ctx.reduxStore = reduxStore\n\n        let appProps = {}\n        if (typeof Comp.getInitialProps === 'function') {\n            appProps = await Comp.getInitialProps(ctx)\n        }\n\n        return {\n            ...appProps,\n            initialReduxState: reduxStore.getState(),\n        }\n    }\n\n    return withReduxApp\n}"]},"metadata":{},"sourceType":"module"}