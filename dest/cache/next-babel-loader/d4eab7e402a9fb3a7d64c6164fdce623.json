{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nvar initialState = {\n  token: ''\n};\nvar userInitialState = {\n  user: ''\n};\n\nfunction add(token) {\n  return {\n    type: ADD,\n    token: token\n  };\n}\n\nfunction addAsync(token) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(add(token));\n    }, 1000);\n  };\n}\n\nvar ADD = 'ADD';\n\nfunction tokenReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD:\n      return {\n        token: action.token || ''\n      };\n\n    default:\n      return state;\n  }\n}\n\nvar UPDATE_USER = 'UPDATE_USER';\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        user: action.user\n      };\n\n    default:\n      return state;\n  }\n}\n\nvar allReducers = combineReducers({\n  token: tokenReducer,\n  user: userReducer\n}); // const store = createStore(\n//     allReducers,\n//     {\n//         token: initialState,\n//         user: userInitialState\n//     },\n//     applyMiddleware(ReduxThunk),\n// )\n// console.log(store.getState())\n// store.subscribe(()=>{\n//     console.log(store.getState())\n// })\n// store.dispatch(add(3))\n// store.dispatch(addAsync(5))\n// store.dispatch({ type:ADD })\n// console.log(store.getState())\n\nexport default function initializeStore() {\n  var store = createStore(allReducers, {\n    token: initialState,\n    user: userInitialState\n  }, applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/mac/Desktop/liy-blog/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","initialState","token","userInitialState","user","add","type","ADD","addAsync","dispatch","setTimeout","tokenReducer","state","action","UPDATE_USER","userReducer","allReducers","initializeStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,IAAMC,gBAAgB,GAAG;AACrBC,EAAAA,IAAI,EAAE;AADe,CAAzB;;AAIA,SAASC,GAAT,CAAaH,KAAb,EAAoB;AAChB,SAAO;AACHI,IAAAA,IAAI,EAAEC,GADH;AAEHL,IAAAA,KAAK,EAALA;AAFG,GAAP;AAIH;;AAED,SAASM,QAAT,CAAkBN,KAAlB,EAAyB;AACrB,SAAO,UAACO,QAAD,EAAc;AACjBC,IAAAA,UAAU,CAAC,YAAM;AACbD,MAAAA,QAAQ,CAACJ,GAAG,CAACH,KAAD,CAAJ,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJD;AAKH;;AAGD,IAAMK,GAAG,GAAG,KAAZ;;AACA,SAASI,YAAT,GAAoD;AAAA,MAA9BC,KAA8B,uEAAtBX,YAAsB;AAAA,MAARY,MAAQ;;AAChD,UAAQA,MAAM,CAACP,IAAf;AACI,SAAKC,GAAL;AACI,aAAO;AAAEL,QAAAA,KAAK,EAAEW,MAAM,CAACX,KAAP,IAAgB;AAAzB,OAAP;;AACJ;AACI,aAAOU,KAAP;AAJR;AAMH;;AAED,IAAME,WAAW,GAAG,aAApB;;AAEA,SAASC,WAAT,GAAuD;AAAA,MAAlCH,KAAkC,uEAA1BT,gBAA0B;AAAA,MAARU,MAAQ;;AACnD,UAAQA,MAAM,CAACP,IAAf;AACI,SAAKQ,WAAL;AACI,aAAO;AACHV,QAAAA,IAAI,EAAES,MAAM,CAACT;AADV,OAAP;;AAGJ;AACI,aAAOQ,KAAP;AANR;AAQH;;AAMD,IAAMI,WAAW,GAAGlB,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAES,YADyB;AAEhCP,EAAAA,IAAI,EAAEW;AAF0B,CAAD,CAAnC,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAIA,eAAe,SAASE,eAAT,GAA2B;AACtC,MAAMC,KAAK,GAAGrB,WAAW,CAACmB,WAAD,EACrB;AACId,IAAAA,KAAK,EAAED,YADX;AAEIG,IAAAA,IAAI,EAAED;AAFV,GADqB,EAKrBJ,eAAe,CAACC,UAAD,CALM,CAAzB;AAMA,SAAOkB,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nconst initialState = {\n    token: ''\n}\n\nconst userInitialState = {\n    user: ''\n}\n\nfunction add(token) {\n    return {\n        type: ADD,\n        token,\n    }\n}\n\nfunction addAsync(token) {\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(add(token))\n        }, 1000)\n    }\n}\n\n\nconst ADD = 'ADD'\nfunction tokenReducer(state = initialState, action) {\n    switch (action.type) {\n        case ADD:\n            return { token: action.token || '' }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USER = 'UPDATE_USER'\n\nfunction userReducer(state = userInitialState, action) {\n    switch (action.type) {\n        case UPDATE_USER:\n            return {\n                user: action.user\n            }\n        default:\n            return state\n    }\n}\n\n\n\n\n\nconst allReducers = combineReducers({\n    token: tokenReducer,\n    user: userReducer\n})\n\n// const store = createStore(\n//     allReducers,\n//     {\n//         token: initialState,\n//         user: userInitialState\n//     },\n//     applyMiddleware(ReduxThunk),\n// )\n\n// console.log(store.getState())\n\n// store.subscribe(()=>{\n//     console.log(store.getState())\n// })\n\n// store.dispatch(add(3))\n\n// store.dispatch(addAsync(5))\n\n// store.dispatch({ type:ADD })\n\n// console.log(store.getState())\n\n\n\nexport default function initializeStore() {\n    const store = createStore(allReducers,\n        {\n            token: initialState,\n            user: userInitialState\n        },\n        applyMiddleware(ReduxThunk))\n    return store\n}"]},"metadata":{},"sourceType":"module"}